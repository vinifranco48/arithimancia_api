import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export const schoolsData = [
  {
    id: 1,
    name: 'Algebristas',
    description: 'Mestres das equa√ß√µes e manipuladores de vari√°veis. Os Algebristas veem o mundo atrav√©s de s√≠mbolos e rela√ß√µes matem√°ticas, capazes de resolver os mais complexos sistemas de equa√ß√µes.',
    axiom: 'Toda inc√≥gnita tem sua solu√ß√£o',
    healthBonus: 10,
    startingGold: 150
  },
  {
    id: 2,
    name: 'Ge√¥metras',
    description: 'Arquitetos do espa√ßo e guardi√µes das formas perfeitas. Os Ge√¥metras compreendem as propriedades do espa√ßo e podem manipular dimens√µes e √¢ngulos com precis√£o absoluta.',
    axiom: 'A forma revela a verdade',
    healthBonus: 15,
    startingGold: 120
  },
  {
    id: 3,
    name: 'Primordiais',
    description: 'Guardi√µes dos n√∫meros primos e dos fundamentos da matem√°tica. Os Primordiais trabalham com os blocos b√°sicos de constru√ß√£o de todos os n√∫meros, possuindo conhecimento sobre divisibilidade e fatores.',
    axiom: 'No princ√≠pio era o n√∫mero',
    healthBonus: 5,
    startingGold: 200
  },
  {
    id: 4,
    name: 'Calculistas',
    description: 'Mestres das derivadas e integrais, manipuladores do infinitesimal. Os Calculistas compreendem as mudan√ßas e podem prever tend√™ncias atrav√©s do c√°lculo diferencial e integral.',
    axiom: 'O movimento revela o infinito',
    healthBonus: 8,
    startingGold: 175
  },
  {
    id: 5,
    name: 'Estat√≠sticos',
    description: 'Profetas da probabilidade e int√©rpretes do acaso. Os Estat√≠sticos podem ler padr√µes no caos e prever o futuro atrav√©s da an√°lise de dados e probabilidades.',
    axiom: 'No acaso h√° ordem',
    healthBonus: 12,
    startingGold: 130
  }
];

export async function seedSchools() {
  console.log('üè´ Seeding schools...');
  
  for (const school of schoolsData) {
    await prisma.school.upsert({
      where: { id: school.id },
      update: school,
      create: school
    });
  }
  
  console.log(`‚úÖ Seeded ${schoolsData.length} schools`);
}

export async function cleanSchools() {
  console.log('üßπ Cleaning schools...');
  await prisma.school.deleteMany({});
  console.log('‚úÖ Schools cleaned');
}